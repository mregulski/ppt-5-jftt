Compiler tests:
    IO:
        ✔ io_assign.imp: read, write, assign: var := const @done (3.01.2017, 20:41:05)
        ✔ io_assign_long.imp: read, write, assign: var := const @done (3.01.2017, 20:42:29)
        ✔ write_const.imp: write @done (3.01.2017, 20:44:21)
    Assign:
        ✔ var := const @done (14.01.2017, 17:57:31)
            ✔ assign_const.imp @done (3.01.2017, 20:57:10)
        ✔ var1 := var2 @done (14.01.2017, 17:57:29)
            ✔ assign_var.imp @done (3.01.2017, 20:58:45)
        ✔ var := expr @done (4.01.2017, 00:20:16) @indirect
    Variables:
        ✔ Scalar @done (4.01.2017, 00:20:47) @indirect
        ✔ ConstArray @done (14.01.2017, 17:57:25)
        ✔ VarArray @done (14.01.2017, 17:57:25)
    Expressions:
        ✔ Const @done (14.01.2017, 14:16:22)
        ✔ Add: @done (14.01.2017, 14:17:21)
            ✔ const_const @done (3.01.2017, 21:00:53)
                ✔ add_const_const.imp @done (3.01.2017, 21:03:56)
            ✔ const + var @done (14.01.2017, 14:16:25)
                ✔ add_const_var.imp @done (3.01.2017, 21:05:57)
                ✔ add_const_self.imp @done (3.01.2017, 21:05:58)
            ✔ var + const @done (14.01.2017, 14:16:30)
                ✔ add_const_var.imp @done (3.01.2017, 21:05:57)
                ✔ add_const_self.imp @done (3.01.2017, 21:05:58)
            ✔ var + var @done (14.01.2017, 14:16:31)
                ✔ add_var_var.imp @done (3.01.2017, 21:08:27)
        ✔ Sub: @done (14.01.2017, 14:17:19)
            ✔ const - const @done (14.01.2017, 14:16:32)
                ✔ sub_const_const.imp @done (3.01.2017, 21:10:24)
                ✔ sub_const_const_neg.imp @done (3.01.2017, 21:12:46)
            ✔ const - var @done (14.01.2017, 14:16:33)
                ✔ sub_const_var.imp @done (5.01.2017, 00:38:09)
                ✔ sub_var_const.imp @done (5.01.2017, 01:22:01)
            ✔ var - var @done (14.01.2017, 14:16:58)
        ✔ Mult: @done (14.01.2017, 14:17:17)
            ✔ const * const @done (14.01.2017, 14:17:14)
                ✔ mult_const_const.imp @done (4.01.2017, 00:19:24)
            ✔ const * var @done (14.01.2017, 14:17:15)
                ✔ mult_const_var.imp @done (4.01.2017, 00:19:26)
            ✔ var * var @done (14.01.2017, 14:17:16)
                ✔ mult_var_var.imp @done (14.01.2017, 14:16:12)

        ☐ Div:
        ☐ Mod:
    Conditions:
        ☐ Eq
            ✔ if_eq_true.imp @done (5.01.2017, 03:03:08)
            ✔ if_eq_false.imp @done (5.01.2017, 03:03:15)
        ☐ Neq
            ✔ if_neq_true.imp @done (5.01.2017, 03:11:05)
            ✔ if_neq_false.imp @done (5.01.2017, 03:11:05)
        ☐ Gt
            ✔ if_gt_true.imp @done (5.01.2017, 14:54:18)
            ✔ if_gt_false.imp @done (5.01.2017, 14:54:20)
        ☐ Lt
            ✔ if_lt_true.imp @done (5.01.2017, 15:20:41)
            ✔ if_lt_false.imp @done (5.01.2017, 15:20:41)
        ☐ Leq
            ✔ if_leq_true.imp @done (5.01.2017, 15:52:53)
            ✔ if_leq_false.imp @done (5.01.2017, 15:52:54)
        ☐ Geq
            ✔ if_geq_true.imp @done (5.01.2017, 15:54:07)
            ✔ if_geq_false.imp @done (5.01.2017, 15:54:08)
    If:
        ✔ if_eq_true.imp @done (5.01.2017, 03:03:08)
        ✔ if_eq_false.imp @done (5.01.2017, 03:03:15)
        ✔ nested @done (14.01.2017, 17:57:39)
    For:
        ☐ To
            ✔ for_const_const.imp @done (16.01.2017, 13:28:31)
            ✔ for_var_const.imp @done (16.01.2017, 13:29:39)
            ✔ for_var_var.imp @done (16.01.2017, 13:31:52)
        ☐ DownTo
            ✔ for_const_const_down.imp @done (16.01.2017, 14:42:02)
            ✔ for_var_const_down.imp @done (16.01.2017, 14:45:16)
            ✔ for_var_var_down.imp @done (16.01.2017, 14:42:04)
        ☐ Nested loops


    While:
        ✔ while_1.imp @done (5.01.2017, 23:54:14)
        ✔ while_nested.imp @done (5.01.2017, 23:54:20)
    Skip:
        ✔ skip.imp @done (5.01.2017, 03:46:36)
    Error detection:
        ☐ uninitialized variables
        ☐ duplicate declaration
        ☐ undeclared variable
    Examples:
        ☐ example/program0.imp
        ☐ example/program1.imp
        ☐ example/program2.imp